% !Ott debug
% !Ott output ./GTFL.tex
% !Ott binary /home/joey/GitHub/ott/bin/ott -tex_wrap false

embed {{tex-wrap-pre
\documentclass[11pt]{article}
\usepackage{amsmath,amssymb}
\usepackage{supertabular}
\usepackage{geometry}
\usepackage{ifthen}
\usepackage{pdflscape}
\usepackage{alltt}%hack
\geometry{a4paper,dvips,twoside,left=22.5mm,right=22.5mm,top=20mm,bottom=30mm}
\usepackage{color}
\usepackage{mathpartir}

}}

% \let\olddefs\ottdefnss
% \renewcommand{\ottdefnss}{
% \begin{figure}
% \olddefs
% \label{fig:relations}
% \caption{Reduction and Conversion Relations on Terms}
% \end{figure}
% }

embed {{tex 




\ottdefnss
}}


metavar x, y, z, c  ::= {{com Symbols from some infinite set}}
  {{ tex \mathit{[[x]]} }}  {{ texvar \mathtt{ [[x]] } }} {{ lex alphanum }}

indexvar i  ::= {{com Indices (ott artifact, please ignore)}}
  {{ tex [[i]] }}  {{ texvar [[i]] }} {{ lex num }}


grammar

n  :: Natural ::= {{com Natural Numbers }}
  |  n1 :+: n2  :: M :: Plus {{tex [[n1]] \black{+} [[n2]]}} %TODO color
  | DYN :: M :: Dyn {{tex \mathtt{ DYN } }}
  | BOOL :: M :: Bool {{tex \mathtt{BOOL } }}
  | NAT :: M :: Nat {{tex \mathtt{NAT } }}
  | ARR :: M :: Arr {{tex \mathtt{ARROW } }}
  | PROD :: M :: Prod {{tex \mathtt{PRODUCT } }}
  | 0 :: M :: Zero

b {{tex b}} :: Boolean ::= {{ com Booleans }}
  | true :: :: True
  | false :: :: False


e {{tex \source{e} }} :: e ::= 
  | x :: :: Var {{com Variables}} {{tex \blue{[[x]]} }}
  | b :: :: Bool {{com Booleans }} {{tex \blue{[[b]]} }}
  | n :: :: Nat {{com Natural Numbers }} {{tex \blue{[[n]]} }}
  | \ x  . e :: :: Lam {{com Functions }} {{tex \blue{\lambda [[x]]}  \ldotp [[e]] }}
  | e1 $ e2 :: :: App {{com Function Application}} {{tex [[e1]]\ [[e2]]}}
  | e1 + e2 :: :: Plus {{com Addition}} {{tex [[e1]] \blue{\boldsymbol{+} } [[e2]]}}
  | e1 == e2 :: :: Eq {{com Number Equality Test}} {{tex [[e1]] \blue{\stackrel{?}{=} } [[e2]] }}
  | if e1 then e2 else e3 :: :: If {{com Conditionals}}  {{tex \blue{\ottkw{if} }\ [[e1]]\ \blue{\ottkw{then} }\ [[e2]]\ \blue{\ottkw{else} }\ [[e3]]}}
  | ( e1 , e2 ) :: :: Pair {{com Tuples}} {{tex \blue{\langle} [[e1]] \blue{,} [[e2]] \blue{\rangle} }}
  | pi1 e :: :: Proj1  {{com Tuple First Projection}} {{tex \blue{ \pi_1 } [[e]] }}
  | pi2 e :: :: Proj2  {{com Tuple Second Projection}} {{tex \blue{ \pi_2 } [[e]] }}
  | pi @ i e :: M :: Proji {{tex \blue{ \pi_{[[i]]} } [[e]] }}
  | e @ i :: M :: Expri {{tex [[e]]_\black{[[i]]} }}
  | ep e :: :: Ascr {{com Evidence Ascription}}
  | error :: :: Err {{com Runtime Type Error}} {{tex \blue{ \ottkw{error} }  }}
  | ( e ) :: M :: Parens {{tex  \blue{(} [[e]] \blue{)}  }} 
  | [ x |=> e1 ] e2 :: M :: Subst {{tex  \black{[} [[e1]] \black{/} [[x]] \black{]} [[e2]] }}
  | C [ e ] :: M :: Context 
  | eval ( e ) :: M :: Eval
  | 120 :: M :: Num120
  | 5 :: M :: Num5
  | 4 :: M :: Num4
  | 3 :: M :: Num3
  | 2 :: M :: Num2
  | 0 :: M :: Num0
  | 1 :: M :: Num1
  | e e1 ... ei :: M :: MApp
  % | ( e1 , .... ,  ei ) :: M :: PairMany


O :: Observable ::= {{com Observable values}}
  | b :: :: Bool
  | n :: :: Nat

r {{tex \source{r} }} :: Raw ::= {{com Raw Irreducable (closed) terms}}
  | b :: :: Bool {{tex \blue{[[b]]} }}
  | n :: :: Nat {{tex \blue{[[n]]} }}
  | \ x  . e :: :: Lam {{com Functions }} {{tex \blue{\lambda [[x]]}  \ldotp [[e]] }}
  | ( v1 , v2 ) :: :: Pair {{tex \blue{\langle} [[v1]] \blue{,} [[v2]] \blue{\rangle} }}
  % | ( r1 , .... ,  ri ) :: M :: PairMany

v {{tex \source{v} }} :: Irr ::= {{com Irreducable (closed) terms }}
  | ep r :: :: Ascr
  | b :: :: Bool  {{tex \blue{[[b]]} }}
  | n :: :: Nat {{tex \blue{[[n]]} }}
  | \ x  . e :: :: Lam {{com Functions }} {{tex \blue{\lambda [[x]]}  \ldotp [[e]] }}
  | ( v1 , v2 ) :: :: Pair {{tex \blue{\langle} [[v1]] \blue{,} [[v2]] \blue{\rangle} }}
  % | ( v1 , .... ,  vi ) :: M :: PairMany

ep {{tex \source{ep} }} :: Evidence ::= 
  | << T >> :: :: Ev {{tex \{ [[T]] \} }}
  | ep1 /\ ep2 :: M :: Meet
  | dom ep :: M :: Dom
  | cod ep :: M :: Cod
  | Prod1 ep :: M :: Left
  | Prod2 ep :: M :: Right
  | Prod @ i ep :: M :: Proji {{tex \ottkw{Proj}_{[[i]]} [[ep]] }}
  | ( ep ) :: M :: Parens

T {{tex \source{T} }} :: Type ::= {{com Types}}
  | Nat :: :: Nat {{tex \blue{\mathsf{Nat} } }}
  | Bool :: :: Bool {{tex \blue{\mathsf{Bool} } }}
  | T1 -> T2 :: :: Arrow {{tex [[T1]]\blue{\to}[[T2]]}}
  | T1 * T2 :: :: PRoduct {{ tex [[T1]]\blue{\times}[[T2]]}}
  | ? :: :: Unknown {{tex \blue{?} }}
  % | dom T :: M :: Dom
  % | cod T :: M :: Cod
  % | left T :: M :: Left 
  % | right T :: M :: Right   
  | ( T ) :: M :: Parens {{tex \blue{( }[[T]] \blue{)} }}
  | [ T ] :: M :: Implicit {{ tex [[T]] }}
  % | T1 /\ T2 :: M :: Meet 
  | dom T :: M :: Dom
  | cod T :: M :: Cod
  | Prod1 T :: M :: Left
  | Prod2 T :: M :: Right
  | Prod @ i T :: M :: Proji {{tex \ottkw{Proj}_{[[i]]} [[T]] }}

Gamma {{ tex \blue{\Gamma} }} :: Gamma ::= {{com Environments}}
  | empty :: :: Empty {{tex \cdot}}
  | Gamma , ( x : T ) :: :: Cons 

C :: C ::=                               {{ com Context Frames }}
  | __ e         ::  :: AppL                   
  | v __         ::  :: AppR                  
  | ( __ , e ) :: ::  PairL
  | ( v , __ ) :: :: PairR
  | pi1 __ :: :: Proj1
  |  pi2 __  :: :: Proj2
  | ep __ :: :: Ascr
  | __ + e1 :: :: PlusL
  | v + __ :: :: PlusR
  | __ == e1 :: :: EqL
  | v == __ :: :: EqR
  | if __ then e1 else e2 :: :: If


u , k :: CPSValue ::= 
  | x :: :: Var
  | n :: :: Nat
  | b :: :: Bool
  | fix x u :: :: Fix
  |  \ x1 ... xi . t  :: :: Fun 
  | ( u1 , u2 ) :: :: Pair {{tex \langle [[u1]], [[u2]]\rangle }}
  | ( u ) :: M :: Parens
  | MEET :: M :: MeetFun {{tex \mathtt{MEET } }}
  | DOM ::  M :: DomFun {{tex \mathtt{DOM } }}
  | COD :: M :: CodFun {{tex \mathtt{COD } }}
  | PROD1 :: M :: Prod1 {{tex \mathtt{PROD}_1 }}
  | PROD2 :: M :: Prod2 {{tex \mathtt{PROD}_2 }}
  | PROD @ i :: M :: Prodi {{tex \mathtt{PROD}_{[[i]]} }}
  | [| ep |] :: M :: TTrans {{tex \mathcal{T}\llbracket [[ep]] \rrbracket}}
  | [| v |] :: M :: VTrans {{tex \mathcal{V}\llbracket [[v]] \rrbracket}}
  | [ x |=> u ] u' :: M :: Subst {{tex  [ [[u]] / [[x]] ] [[u']] }}

d :: CPSDecl ::=
  | x := u :: :: Def
  | x := pi1 u :: :: Proj1
  | x := pi2 u :: :: Proj2
  | x := u1 + u2 :: :: Plus
  | x := u1 == u2 :: :: Eq
  | x := pi @ i u :: M :: Proji {{tex [[x]] := \pi_{[[i]]}\ [[u]] }}


t :: CPS ::= 
  | v :: :: Value 
  | let d in t :: :: Let
  | u [ arg ] :: :: App {{tex [[u]]([[arg]])}} 
  | if u t1 t2 :: :: If {{tex \ottkw{ if }\ [[u]]\ \ottkw{ then }\ [[t1]]\ \ottkw{ else }\ [[t2]] }}
  | halt [ u ] :: :: ReturnHalt
  | error :: :: ErrorHalt
  | ( t ) :: M :: Parens 
  | [| e |] k :: M :: Translation {{tex \mathcal{E}\llbracket [[e]] \rrbracket [[k]] }}
  | [ x |=> u ] t :: M :: Subst {{tex  [ [[u]] / [[x]] ] [[t]] }}
  | \\ :: M :: Newline {{tex \\ }}
  | \\( t ) :: M :: NL {{tex \\ [[t]] }}
  | -- t :: M :: Indent {{tex \qquad [[t]] }}
  | * :: M :: Blank {{tex }} 
  | iif u t1 :: M :: OnearmIf {{tex \ottkw{ if }\ [[u]]\ \ottkw{ then }\ [[t1]]\ }}
  | else t :: M :: Else {{tex \ottkw{ else }\ [[t]]  }}
  | ,,, :: M :: Ldots {{tex \ldots}}

arg :: Arg ::=
  | u1 , ... , ui :: :: Seq


terminals :: 'terminals_' ::=
  | --> :: :: StepsTo {{tex \longrightarrow}}
  | -->* :: :: StepsToStar {{tex {\longrightarrow^{*} } }}
  | =/= :: :: Neq {{tex \neq }}
  | |- :: :: Turnstile {{tex \vdash}}
  | pi :: :: Pi {{tex \pi}}
  | ~=~ :: :: Cong {{tex \cong}}
  | /\ :: :: Meet {{tex \sqcap}}
  | dom :: :: Dom {{tex \ottkw{dom} }}
  | cod :: :: Cod {{tex \ottkw{cod} }}
  | Proj1 :: :: Proj1 {{tex \ottkw{Proj}_1 }}
  | Proj2 :: :: Proj2 {{tex \ottkw{Proj}_2 }}
  | elem :: :: Elem {{tex \in}}
  | == :: :: TestEq {{tex \stackrel{?}{=} }}
  | pi1 :: :: Pi1 {{tex \pi_1}}
  | pi2 :: :: Pi2 {{tex \pi_2}}
  | \ :: :: Lam {{tex \lambda }}
  | . :: :: Ldot {{tex \ldotp }}
  | [| :: :: LScott {{tex \llbracket}}
  | |] :: :: RScott {{tex \rrbracket}}
  | ==== :: :: LongEq {{tex = }}
  | __ :: :: Hole {{tex \square}}


formula :: 'formula_' ::=
    % | formula \\\\ :: :: lbh {{ tex [[formula]] \ottlinebreakhack }}
      | judgement           ::   :: judgement
      | e1 =/= e2 :: :: Neq
      | ( x : T ) elem Gamma :: :: Lookup
      | ep undefined :: :: Undef
      | T1 ==== T2 :: :: TypeEq
      | i elem { 1 , 2 } :: :: Index
      | c fresh :: :: Fresh
      | k := k' :: :: Assign
      | t := t' :: :: Assignt


contextrules
  C _:: e :: e

subrules 
  O <:: e
  v <:: e
  r <:: v

  




defns
Semantics :: '' ::=

defn
e1 --> e2 :: :: Red :: Red {{com Reduction Relation on terms}} 
by 

----------------------------------------- :: IfTrue
if true then e1 else e2 --> e1

----------------------------------------- :: IfFalse
if false then e1 else e2 --> e2

if b then e1 else e2 --> e
----------------------------------------- :: IfEv
if ep b then e1 else e2 --> e

----------------------------------------- :: App
(\ x . e) v  --> [ x |=> v ] e

----------------------------------------- :: AppEv
(ep1 (\ x . e)) (ep2 r)  --> (cod ep2) ([ x |=> (dom ep1 /\ ep2) r ] e)

dom ep1 /\ ep2 undefined
----------------------------------------- :: AppEvFail
(ep1 (\ x . e)) (ep2 r)  --> error

----------------------------------------- :: AppEvPartial
(ep (\ x . e1)) r  --> (cod ep)([ x |=> (dom ep) e2 ] e1)

dom ep undefined
----------------------------------------- :: AppEvPartialFail
(ep (\ x . e1)) v  --> error

----------------------------------------- :: Plus
n1 + n2  --> n1 :+: n2

n1 + v --> e
----------------------------------------- :: PlusEvL
(ep n1) + v  --> e

n1 + n2 --> e
----------------------------------------- :: PlusEvR
n1 + ep n2  --> e

----------------------------------------- :: EqT
n == n  --> true

n1 =/= n2
----------------------------------------- :: EqF
n1 == n2  --> false

n1 == v --> e
----------------------------------------- :: EqEvL
(ep n1) == v  --> e

n1 == n2 --> e
----------------------------------------- :: EqEvR
n1 == ep n2  --> e


i elem {1,2}
------------------------------------------ :: Proj
pi@i (e1 , e2) --> e_i

i elem {1,2}
------------------------------------------ :: ProjEv
pi@i (ep (e1 , e2)) --> (Prod@i ep) e_i

Prod@i ep undefined
------------------------------------------ :: ProjFail
pi@i (ep (e1 , e2)) --> error


------------------------------------------ :: Ascr
ep1 (ep2 r) --> (ep1 /\ ep2) r

ep1 /\ ep2 undefined
------------------------------------------ :: AscrFail
ep1 (ep2 r) --> error

e1 --> e2
------------------------------------------ :: Context
C[e1] --> C[e2]

e --> error
------------------------------------------ :: ContextFail
C[e] --> C[error]






defns
Types :: '' ::=

defn
Gamma |- e : T :: :: Hastype :: Hastype {{com Typability relation }} 
by 

 (x : T) elem Gamma
---------------- :: Var
  Gamma |- x : T

-------------- :: Bool
  Gamma |- b : Bool

-------------- :: Nat
  Gamma |- n : Nat 

  Gamma |- e1 : Nat
  Gamma |- e2 : Nat
  -------------- :: Plus
  Gamma |- e1 + e2 : Nat 

  Gamma |- e1 : Nat
  Gamma |- e2 : Nat
  -------------- :: Eq
  Gamma |- e1 == e2 : Nat


  Gamma , ( x : T1) |- e : T2
-------------- :: Lam
  Gamma |- \ x  . e : T1 -> T2 

  Gamma |- e1 : T1 -> T2
  Gamma |- e2 : T1
-------------- :: App
  Gamma |- e1 e2 : T2

  Gamma |- e : Bool
  Gamma |- e1 : T
  Gamma |- e2 : T
  ---------------- :: If
  Gamma |- if e then e1 else e2 : T  


  Gamma |- e1 : T1
  Gamma |- e2 : T2
  --------------- :: Pair
  Gamma |- (e1 , e2 ) : T1 * T2

  Gamma |- e : T1 * T2
  i elem {1,2}
  --------------- :: Proj
  Gamma |- p@i e : T


  Gamma |- e : T2
  ep |- T1 ~=~ T2
  --------------- :: Ascr
  Gamma |- ep e : T1

defn
ep |- T1 ~=~ T2 :: :: Consistent :: Consistent {{com Type Consistency relative to Evidence }} 
by 

T3 /\ T1 ==== T3
T3 /\ T2 ==== T3
----------------- :: Ev
<< T3 >> |- T1 ~=~ T2

defn
T1 /\ T2 ==== T3 :: :: Meet :: Meet {{com Precision Meet }} {{tex [[T1]] \sqcap [[T2]] = [[T3]]}}
by 

------------- :: DynL
? /\ T ==== T

------------- :: DynR
T /\ ? ==== T

-------------- :: Refl
T /\ T ==== T 

T1 /\ T1' ==== T1''
T2 /\ T2' ==== T2''
--------------- :: Fun
T1 -> T2 /\ T1' -> T2' ==== T1'' -> T2'' 

T1 /\ T1' ==== T1''
T2 /\ T2' ==== T2''
--------------- :: Prod
T1 * T2 /\ T1' * T2' ==== T1'' * T2'' 

defn
[| v |]  ==== u :: :: ValTransform :: ValTransform  {{com CPS Translation of Closed Values}} {{tex \mathcal{V}\llbracket [[v]] \rrbracket = [[u]] }}
by


---------------------------- :: Bool
[|b|]  ==== (DYN, b)


---------------------------- :: Num
[|n|] ==== (DYN, n)

[|e|] c ==== t
---------------------------- :: Fun
[| \ x  . e |]  ==== (DYN, \ x c . t )


---------------------------- :: Pair
[| (v1, v2) |]  ==== (DYN, ([|v1|], [|v2|]) )

[| r |] ==== (DYN, u)
---------------------------- :: Ev
[| ep r |]  ==== ([|ep|], u )

defn
[| e |] k ==== t :: :: Transform :: Transform  {{com CPS Translation of Expressions}} {{tex \mathcal{E}\llbracket [[e]] \rrbracket [[k]] = [[t]] }}
by

---------------------------- :: Var
[|x|] k ==== k[x]

---------------------------- :: Bool
[|b|] k ==== k [(DYN, b)]


---------------------------- :: Num
[|n|] k ==== k [(DYN, n)] 

[|e|] c ==== t
---------------------------- :: Fun
[| (\ x  . e) |] k ==== k [(DYN, \ x c . t )]

k1 := ( \x2 . let y1 := pi1 x1 in let z1 := pi2 x1 in let y2 := pi1 x2 in let z2 := pi2 x2 in t1 )
t1 := DOM [y1, \y1' . COD [ y1, \y1''. MEET [y1', y2, (\ y3 . z1 [(y3, z2), (\z3 . t2) ] )] ] ] 
t2 := let z3' := pi1 z3 in let z3'' := pi2 z3 in MEET[y1'', z3', (\z4. k[(z4, z3'')]) ] 
[|e2|] k1 ==== t'
[|e1|] (\ x1 . t' ) ==== t
---------------------------- :: App
[| e1 e2 |] k ==== t

k1 := ( \x2 . let z1 := pi2 x1 in let z2 := pi2 x2 in let z3 := z1 + z2 in k [z3] )
[|e2|] k1 ==== t'
[|e1|] (\ x1 . t' ) ==== t
---------------------------- :: Plus
[| e1 + e2 |] k ==== t

k1 := ( \x2 . let z1 := pi2 x1 in let z2 := pi2 x2 in let z3 := z1 == z2 in k [z3] )
[|e2|] k1 ==== t'
[|e1|] (\ x1 . t' ) ==== t
---------------------------- :: Eq
[| e1 + e2 |] k ==== t

[|e2|] (\ x2 . k [(DYN, (x1, x2))] ) ==== t'
[|e1|] (\ x1 . t' ) ==== t
---------------------------- ::Pair
[| (e1, e2) |] k ==== t

[|e1|] k ==== t1
[|e2|] k ==== t2
[|e0|] (\ x0 . let x := pi2 x0 in if x t1 t2 ) ==== t
---------------------------- :: If
[| if e0 then e1 else e2 |] k ==== t

[|e|] (\ x . let y1 := pi1 x in let y2 := pi2 x in PROD @ i [y1, k']  ) ==== t
k' := (\ z1 . let z2 := pi@i y in let z21 := pi1 z2 in let z22 := pi2 z2 in MEET[z1, z21, (\z1' . k [(z1', z22)] )])
---------------------------- ::Proj
[| pi @ i e |] k ==== t

[|e|] (\ x . let x1 := pi1 x in let x2 := pi2 x in MEET [ [|ep|],x1, (\y . k [(y,x2)]) ] ) ==== t
---------------------------- ::Ev
[| ep  e |] k ==== t

---------------------------- ::Err
[| error |] k ==== error

defn
[| ep |]  ==== u :: :: EvTransform :: EvTransform {{com CPS Representation of Runtime Evidence}}  {{tex \mathcal{T}\llbracket [[ep]] \rrbracket = [[u]] }}
by

------------------ :: Bool
[|<<Bool>>|] ==== (BOOL, 0)

------------------ :: Nat
[|<<Nat>>|] ==== ( NAT , 0)

------------------ :: Dyn
[|<<?>>|] ==== ( DYN , 0)

----------------- :: Arr
[|<<T1 -> T2>>|] ==== (ARR, ([|<<T1>>|], [|<<T2>>|]))

----------------- :: Prod
[|<<T1 -> T2>>|] ==== (PROD, ( [|<<T1>>|], [|<<T2>>|]))


defn
t1  -->* t2 :: :: KStep :: KStep % {{tex \llbracket [[ep]] \rrbracket = [[u]] }}
by